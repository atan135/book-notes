public LuaTable CreatePackRetinueRetinue(PackRetinue.Retinue data)
{
	LuaTable t = luaEnv.NewTable();
	t.Set<string, int>("id", data.id);
	t.Set<string, int>("hp", data.hp);
	t.Set<string, int>("defence", data.defence);
	t.Set<string, int>("life", data.life);
	t.Set<string, int>("max_hp", data.max_hp);
	t.Set<string, int>("host_aoi_id", data.host_aoi_id);
	return t;
}
public PackRetinue.Retinue CreatePBPackRetinueRetinue(LuaTable t)
{
	PackRetinue.Retinue data = new PackRetinue.Retinue();
	if( t.ContainsKey<string>("id"))
	{
		data.id = t.Get<string, int>("id");
	}
	else
	{
		Log.LogError("Field id Not Exist in LuaTable From Service!!");
	}
	if( t.ContainsKey<string>("hp"))
	{
		data.hp = t.Get<string, int>("hp");
	}
	else
	{
		Log.LogError("Field hp Not Exist in LuaTable From Service!!");
	}
	if( t.ContainsKey<string>("defence"))
	{
		data.defence = t.Get<string, int>("defence");
	}
	else
	{
		Log.LogError("Field defence Not Exist in LuaTable From Service!!");
	}
	if( t.ContainsKey<string>("life"))
	{
		data.life = t.Get<string, int>("life");
	}
	else
	{
		Log.LogError("Field life Not Exist in LuaTable From Service!!");
	}
	if( t.ContainsKey<string>("max_hp"))
	{
		data.max_hp = t.Get<string, int>("max_hp");
	}
	else
	{
		Log.LogError("Field max_hp Not Exist in LuaTable From Service!!");
	}
	if( t.ContainsKey<string>("host_aoi_id"))
	{
		data.host_aoi_id = t.Get<string, int>("host_aoi_id");
	}
	else
	{
		Log.LogError("Field host_aoi_id Not Exist in LuaTable From Service!!");
	}
	return data;
}
public LuaTable CreatePackRetinueRetinueChange(PackRetinue.RetinueChange data)
{
	LuaTable t = luaEnv.NewTable();
	if (data.insert_retinues != null)
	{
		LuaTable insert_retinues_item = luaEnv.NewTable();
		for(int i = 0;i < data.insert_retinues.Count; ++i)
		{
			LuaTable t_insert_retinues = CreatePackRetinueRetinue(data.insert_retinues[i]);
			insert_retinues_item.Set<int, LuaTable>(i+1, t_insert_retinues);
		}
		t.Set<string, LuaTable>("insert_retinues", insert_retinues_item);
	}
	if (data.remove_retinues != null)
	{
		LuaTable remove_retinues_item = luaEnv.NewTable();
		for(int i = 0;i < data.remove_retinues.Count; ++i)
		{
			remove_retinues_item.Set<int, int>(i+1, data.remove_retinues[i]);
		}
		t.Set<string, LuaTable>("remove_retinues", remove_retinues_item);
	}
	if (data.update_retinues != null)
	{
		LuaTable update_retinues_item = luaEnv.NewTable();
		for(int i = 0;i < data.update_retinues.Count; ++i)
		{
			LuaTable t_update_retinues = CreatePackRetinueRetinue(data.update_retinues[i]);
			update_retinues_item.Set<int, LuaTable>(i+1, t_update_retinues);
		}
		t.Set<string, LuaTable>("update_retinues", update_retinues_item);
	}
	return t;
}
public PackRetinue.RetinueChange CreatePBPackRetinueRetinueChange(LuaTable t)
{
	PackRetinue.RetinueChange data = new PackRetinue.RetinueChange();
	if(t.ContainsKey("insert_retinues"))
	{
		LuaTable t_insert_retinues = t.Get<string, LuaTable>("insert_retinues");
		data.insert_retinues = new List<PackRetinue.Retinue>();
		for(int i = 0; ;++i)
		{
			if(t_insert_retinues.ContainsKey<int>(i + 1))
			{
				LuaTable subT_insert_retinues = t_insert_retinues.Get<int, LuaTable>(i + 1);
				PackRetinue.Retinue subData_insert_retinues = CreatePBPackRetinueRetinue(subT_insert_retinues);
				data.insert_retinues.Add(subData_insert_retinues);
			}
			else
			{
				break;
			}
		}
	}
	if(t.ContainsKey("remove_retinues"))
	{
		LuaTable t_remove_retinues = t.Get<string, LuaTable>("remove_retinues");
		data.remove_retinues = new List<int>();
		for(int i = 0; ;++i)
		{
			if(t_remove_retinues.ContainsKey<int>(i + 1))
			{
				data.remove_retinues.Add(t_remove_retinues.Get<int, int>(i + 1));
			}
			else
			{
				break;
			}
		}
	}
	if(t.ContainsKey("update_retinues"))
	{
		LuaTable t_update_retinues = t.Get<string, LuaTable>("update_retinues");
		data.update_retinues = new List<PackRetinue.Retinue>();
		for(int i = 0; ;++i)
		{
			if(t_update_retinues.ContainsKey<int>(i + 1))
			{
				LuaTable subT_update_retinues = t_update_retinues.Get<int, LuaTable>(i + 1);
				PackRetinue.Retinue subData_update_retinues = CreatePBPackRetinueRetinue(subT_update_retinues);
				data.update_retinues.Add(subData_update_retinues);
			}
			else
			{
				break;
			}
		}
	}
	return data;
}
